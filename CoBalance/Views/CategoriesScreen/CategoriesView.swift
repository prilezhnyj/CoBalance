//
//  CategoriesView.swift
//  CoBalance
//
//  Created by –ú–∞–∫—Å–∏–º –ë–æ—Ç–∞–ª–æ–≤ on 04.05.2023.
//

import SwiftUI

struct CategoriesView: View {
    
    // MARK: - –°–í–û–ô–°–¢–í–ê
    // –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    @Binding var categoryType: CategoryType
    @State private var categoryLogo: String = ""
    @State private var categoryTitle: String = ""

    // –û–±—ä–µ–∫—Ç—ã —Å—Ä–µ–¥—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
    @EnvironmentObject private var categoryVM: CategoryViewModel
    @Environment (\.dismiss) private var dismiss
    
    // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å UI
    @State private var checkTitleAndLogo = false
    @State private var warningText = ""
    @State private var isSuccessfully = false
    
    // MARK: - –¢–ï–õ–û
    var body: some View {
        ZStack(alignment: .bottom) {
            // –§–æ–Ω
            Color.theme.backgroundPrimary.ignoresSafeArea()
            
            // –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–æ—Ç–Ω–æ
            VStack(alignment: .center, spacing: 16) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                Text(categoryType == .expense ? "Expense categories" : "Income categories")
                    .font(.system(size: 20, weight: .bold, design: .rounded))
                    .foregroundColor(Color.theme.textPrimary)
                    .padding(.top)
                    .padding(.horizontal)
                
                // –í—ã–±–æ—Ä —Ç–∏–ø–∞
                Picker("", selection: $categoryType) {
                    ForEach(CategoryType.allCases, id: \.self) { item in
                        Text(item.rawValue)
                    }
                }
                .pickerStyle(.segmented)
                .padding(.horizontal)
                
                // –í–≤–æ–¥ –∏–∫–æ–Ω–∫–∏ + –∑–∞–≥–æ–ª–æ–≤–∫–∞
                HStack(alignment: .center, spacing: 16) {
                    // –ò–∫–æ–Ω–∫–∞
                    TextField("üòÄ", text: $categoryLogo)
                        .foregroundColor(Color.theme.textPrimary)
                        .font(.system(size: 20, weight: .bold, design: .rounded))
                        .multilineTextAlignment(.center)
                        .frame(width: 40, height: 40, alignment: .center)
                        .background(Color.theme.backgroundSecondary)
                        .clipShape(Circle())
                        .shadow(color: .theme.backgroundSecondary, radius: 20, x: 0, y: -30)
                        .onChange(of: categoryLogo) { newValue in
                            categoryLogo = String(categoryLogo.prefix(1))
                        }
                    
                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    TextField("Category name", text: $categoryTitle)
                        .font(.system(size: 20, weight: .bold, design: .rounded))
                        .padding(.leading)
                        .frame(height: 40)
                        .frame(maxWidth: .infinity)
                        .background(Color.theme.backgroundSecondary)
                        .foregroundColor(Color.theme.textPrimary)
                        .clipShape(Capsule(style: .continuous))
                        .shadow(color: Color.theme.backgroundSecondary, radius: 20, x: 0, y: 0)
                }
                .padding(.horizontal)
                
                // –í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                if checkTitleAndLogo {
                    PopupWarningView(text: $warningText)
                        .padding(.horizontal)
                }
                
                // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                SecondaryButtonView(icon: "doc", title: "Save", isActive: !categoryLogo.isEmpty || !categoryTitle.isEmpty) {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    guard categoryVM.isDuplicate(title: categoryTitle) else {
                        warningText = "There is already such a category."
                        
                        withAnimation(.spring()) {
                            checkTitleAndLogo = true
                        }
                        
                        return
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                    guard !categoryLogo.isEmpty && !categoryTitle.isEmpty else {
                        warningText = "Before saving, please enter the emoji and title."
                        
                        withAnimation(.spring()) {
                            checkTitleAndLogo = true
                        }
                        
                        return
                    }
                    
                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    withAnimation(.spring()) {
                        categoryVM.addCategory(type: categoryType, title: categoryTitle, logo: categoryLogo)
                    }
                    
                    // –°–±—Ä–æ—Å —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–Ω–µ–Ω–∏–π
                    withAnimation(.spring()) {
                        categoryTitle = ""
                        categoryLogo = ""
                        checkTitleAndLogo = false
                        isSuccessfully = true
                    }
                    
                    DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                        dismiss()
                    }
                }
                
                // MARK: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                categoriesList()
            }
            
            PopupSuccessfullyView(isSuccessfully: $isSuccessfully)
        }
    }
    
    // MARK: - –§–£–ù–ö–¶–ò–ò && UI
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Ç–∏–ø—ã
    private func filteringList(for categories: [Category]) -> some View {
        Section {
            ForEach(categories) { category in
                CategoryCellView(category: category) {
                    categoryVM.deleteCategory(for: category)
                }
            }
        } header: {
            if !categories.isEmpty {
                Text("All categories".uppercased())
                    .font(.system(size: 14, weight: .bold, design: .rounded))
                    .foregroundColor(Color.theme.textSecondary)
                    .frame(maxWidth: .infinity, alignment: .leading)
            }
        }
    }
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    private func categoriesList() -> some View {
        ScrollView(.vertical, showsIndicators: false) {
            LazyVStack(alignment: .center, spacing: 8, pinnedViews: []) {
                if categoryType == .expense {
                    filteringList(for: categoryVM.categories.filter({ $0.type == .expense }))
                } else {
                    filteringList(for: categoryVM.categories.filter({ $0.type == .income }))
                }
            }
            .padding()
        }
    }
}

// MARK: - –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–†
struct CategoriesScreen_Previews: PreviewProvider {
    static var previews: some View {
        CategoriesView(categoryType: .constant(.expense))
            .environmentObject(DevelopmentPreview.instance.categoryVM)
    }
}
